#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const fs   = require('fs');
const jsonfile = require('jsonfile');
const R    = require('ramda');
const configuration = require('../src/configuration');
const delDir = require('../src/delDir');
const { isHttp, isHttps, genModel } = require('../src/utils');

const cacheConfigurePath =  __dirname + "/.autorest.temp.json";

program
    .usage("<configPath>")
    .on('--help', function () {
        console.log('');
        console.log('$ swagger-model gen-model <configPath>');
    })
    .parse(process.argv);


const args = program.args;
const [configPath] = args;

const autorestConfig = configuration.getConfig(configPath);

autorestConfig['output-folder'] = path.resolve(process.cwd() + '/' + autorestConfig['output-folder']);
autorestConfig['input-file'] = path.resolve(process.cwd() + '/' + autorestConfig['input-file']);

jsonfile.writeFile(cacheConfigurePath, autorestConfig, (error) => {
    if(error){
        console.error(error);
        return false;
    }
    
    // 如果找不到json file并且autorestConfig['input-file']不是http或https 的url
    if(!fs.existsSync(autorestConfig['input-file']) && !(isHttp(autorestConfig['input-file']) || isHttps(autorestConfig['input-file']))) {
       throw Error("please provide apidocs json file or apidocs http url");
    }else {
        console.log('正在生成model');
        genModel(cacheConfigurePath);
    }
});
